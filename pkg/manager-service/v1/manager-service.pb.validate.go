// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager-service/v1/manager-service.proto

package manager_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderV1MultiError, or nil if none found.
func (m *OrderV1) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderV1ValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderV1ValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderV1ValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageType

	// no validation rules for Cost

	// no validation rules for Weight

	// no validation rules for UseTape

	if len(errors) > 0 {
		return OrderV1MultiError(errors)
	}

	return nil
}

// OrderV1MultiError is an error wrapping multiple validation errors returned
// by OrderV1.ValidateAll() if the designated constraints aren't met.
type OrderV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderV1MultiError) AllErrors() []error { return m }

// OrderV1ValidationError is the validation error returned by OrderV1.Validate
// if the designated constraints aren't met.
type OrderV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderV1ValidationError) ErrorName() string { return "OrderV1ValidationError" }

// Error satisfies the builtin error interface
func (e OrderV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderV1ValidationError{}

// Validate checks the field values on OrderViewV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderViewV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderViewV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderViewV1MultiError, or
// nil if none found.
func (m *OrderViewV1) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderViewV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderViewV1ValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderViewV1ValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderViewV1ValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderViewV1MultiError(errors)
	}

	return nil
}

// OrderViewV1MultiError is an error wrapping multiple validation errors
// returned by OrderViewV1.ValidateAll() if the designated constraints aren't met.
type OrderViewV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderViewV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderViewV1MultiError) AllErrors() []error { return m }

// OrderViewV1ValidationError is the validation error returned by
// OrderViewV1.Validate if the designated constraints aren't met.
type OrderViewV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderViewV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderViewV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderViewV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderViewV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderViewV1ValidationError) ErrorName() string { return "OrderViewV1ValidationError" }

// Error satisfies the builtin error interface
func (e OrderViewV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderViewV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderViewV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderViewV1ValidationError{}

// Validate checks the field values on AddOrderRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderRequestV1MultiError, or nil if none found.
func (m *AddOrderRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AddOrderRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := AddOrderRequestV1ValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrderRequestV1ValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrderRequestV1ValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrderRequestV1ValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddOrderRequestV1MultiError(errors)
	}

	return nil
}

// AddOrderRequestV1MultiError is an error wrapping multiple validation errors
// returned by AddOrderRequestV1.ValidateAll() if the designated constraints
// aren't met.
type AddOrderRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderRequestV1MultiError) AllErrors() []error { return m }

// AddOrderRequestV1ValidationError is the validation error returned by
// AddOrderRequestV1.Validate if the designated constraints aren't met.
type AddOrderRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderRequestV1ValidationError) ErrorName() string {
	return "AddOrderRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrderRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderRequestV1ValidationError{}

// Validate checks the field values on AddOrderResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrderResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderResponseV1MultiError, or nil if none found.
func (m *AddOrderResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrderResponseV1MultiError(errors)
	}

	return nil
}

// AddOrderResponseV1MultiError is an error wrapping multiple validation errors
// returned by AddOrderResponseV1.ValidateAll() if the designated constraints
// aren't met.
type AddOrderResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderResponseV1MultiError) AllErrors() []error { return m }

// AddOrderResponseV1ValidationError is the validation error returned by
// AddOrderResponseV1.Validate if the designated constraints aren't met.
type AddOrderResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderResponseV1ValidationError) ErrorName() string {
	return "AddOrderResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrderResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderResponseV1ValidationError{}

// Validate checks the field values on RefundRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefundRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundRequestV1MultiError, or nil if none found.
func (m *RefundRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := RefundRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := RefundRequestV1ValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefundRequestV1MultiError(errors)
	}

	return nil
}

// RefundRequestV1MultiError is an error wrapping multiple validation errors
// returned by RefundRequestV1.ValidateAll() if the designated constraints
// aren't met.
type RefundRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundRequestV1MultiError) AllErrors() []error { return m }

// RefundRequestV1ValidationError is the validation error returned by
// RefundRequestV1.Validate if the designated constraints aren't met.
type RefundRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundRequestV1ValidationError) ErrorName() string { return "RefundRequestV1ValidationError" }

// Error satisfies the builtin error interface
func (e RefundRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundRequestV1ValidationError{}

// Validate checks the field values on RefundResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefundResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefundResponseV1MultiError, or nil if none found.
func (m *RefundResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RefundResponseV1MultiError(errors)
	}

	return nil
}

// RefundResponseV1MultiError is an error wrapping multiple validation errors
// returned by RefundResponseV1.ValidateAll() if the designated constraints
// aren't met.
type RefundResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundResponseV1MultiError) AllErrors() []error { return m }

// RefundResponseV1ValidationError is the validation error returned by
// RefundResponseV1.Validate if the designated constraints aren't met.
type RefundResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundResponseV1ValidationError) ErrorName() string { return "RefundResponseV1ValidationError" }

// Error satisfies the builtin error interface
func (e RefundResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundResponseV1ValidationError{}

// Validate checks the field values on GiveOrdersRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOrdersRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrdersRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrdersRequestV1MultiError, or nil if none found.
func (m *GiveOrdersRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrdersRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GiveOrdersRequestV1MultiError(errors)
	}

	return nil
}

// GiveOrdersRequestV1MultiError is an error wrapping multiple validation
// errors returned by GiveOrdersRequestV1.ValidateAll() if the designated
// constraints aren't met.
type GiveOrdersRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrdersRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrdersRequestV1MultiError) AllErrors() []error { return m }

// GiveOrdersRequestV1ValidationError is the validation error returned by
// GiveOrdersRequestV1.Validate if the designated constraints aren't met.
type GiveOrdersRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrdersRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrdersRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrdersRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrdersRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrdersRequestV1ValidationError) ErrorName() string {
	return "GiveOrdersRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrdersRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrdersRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrdersRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrdersRequestV1ValidationError{}

// Validate checks the field values on GiveOrdersResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOrdersResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrdersResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrdersResponseV1MultiError, or nil if none found.
func (m *GiveOrdersResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrdersResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GiveOrdersResponseV1MultiError(errors)
	}

	return nil
}

// GiveOrdersResponseV1MultiError is an error wrapping multiple validation
// errors returned by GiveOrdersResponseV1.ValidateAll() if the designated
// constraints aren't met.
type GiveOrdersResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrdersResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrdersResponseV1MultiError) AllErrors() []error { return m }

// GiveOrdersResponseV1ValidationError is the validation error returned by
// GiveOrdersResponseV1.Validate if the designated constraints aren't met.
type GiveOrdersResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrdersResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrdersResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrdersResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrdersResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrdersResponseV1ValidationError) ErrorName() string {
	return "GiveOrdersResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrdersResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrdersResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrdersResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrdersResponseV1ValidationError{}

// Validate checks the field values on ReturnRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReturnRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnRequestV1MultiError, or nil if none found.
func (m *ReturnRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnRequestV1ValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnRequestV1MultiError(errors)
	}

	return nil
}

// ReturnRequestV1MultiError is an error wrapping multiple validation errors
// returned by ReturnRequestV1.ValidateAll() if the designated constraints
// aren't met.
type ReturnRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnRequestV1MultiError) AllErrors() []error { return m }

// ReturnRequestV1ValidationError is the validation error returned by
// ReturnRequestV1.Validate if the designated constraints aren't met.
type ReturnRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnRequestV1ValidationError) ErrorName() string { return "ReturnRequestV1ValidationError" }

// Error satisfies the builtin error interface
func (e ReturnRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnRequestV1ValidationError{}

// Validate checks the field values on ReturnResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReturnResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnResponseV1MultiError, or nil if none found.
func (m *ReturnResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReturnResponseV1MultiError(errors)
	}

	return nil
}

// ReturnResponseV1MultiError is an error wrapping multiple validation errors
// returned by ReturnResponseV1.ValidateAll() if the designated constraints
// aren't met.
type ReturnResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnResponseV1MultiError) AllErrors() []error { return m }

// ReturnResponseV1ValidationError is the validation error returned by
// ReturnResponseV1.Validate if the designated constraints aren't met.
type ReturnResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnResponseV1ValidationError) ErrorName() string { return "ReturnResponseV1ValidationError" }

// Error satisfies the builtin error interface
func (e ReturnResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnResponseV1ValidationError{}

// Validate checks the field values on ViewRefundsRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewRefundsRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewRefundsRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewRefundsRequestV1MultiError, or nil if none found.
func (m *ViewRefundsRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewRefundsRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageId() <= 0 {
		err := ViewRefundsRequestV1ValidationError{
			field:  "PageId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrdersPerPage() <= 0 {
		err := ViewRefundsRequestV1ValidationError{
			field:  "OrdersPerPage",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ViewRefundsRequestV1MultiError(errors)
	}

	return nil
}

// ViewRefundsRequestV1MultiError is an error wrapping multiple validation
// errors returned by ViewRefundsRequestV1.ValidateAll() if the designated
// constraints aren't met.
type ViewRefundsRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewRefundsRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewRefundsRequestV1MultiError) AllErrors() []error { return m }

// ViewRefundsRequestV1ValidationError is the validation error returned by
// ViewRefundsRequestV1.Validate if the designated constraints aren't met.
type ViewRefundsRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewRefundsRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewRefundsRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewRefundsRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewRefundsRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewRefundsRequestV1ValidationError) ErrorName() string {
	return "ViewRefundsRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ViewRefundsRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewRefundsRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewRefundsRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewRefundsRequestV1ValidationError{}

// Validate checks the field values on ViewRefundsResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewRefundsResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewRefundsResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewRefundsResponseV1MultiError, or nil if none found.
func (m *ViewRefundsResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewRefundsResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewRefundsResponseV1ValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewRefundsResponseV1ValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewRefundsResponseV1ValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewRefundsResponseV1MultiError(errors)
	}

	return nil
}

// ViewRefundsResponseV1MultiError is an error wrapping multiple validation
// errors returned by ViewRefundsResponseV1.ValidateAll() if the designated
// constraints aren't met.
type ViewRefundsResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewRefundsResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewRefundsResponseV1MultiError) AllErrors() []error { return m }

// ViewRefundsResponseV1ValidationError is the validation error returned by
// ViewRefundsResponseV1.Validate if the designated constraints aren't met.
type ViewRefundsResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewRefundsResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewRefundsResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewRefundsResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewRefundsResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewRefundsResponseV1ValidationError) ErrorName() string {
	return "ViewRefundsResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ViewRefundsResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewRefundsResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewRefundsResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewRefundsResponseV1ValidationError{}

// Validate checks the field values on ViewOrdersRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewOrdersRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewOrdersRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewOrdersRequestV1MultiError, or nil if none found.
func (m *ViewOrdersRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewOrdersRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ViewOrdersRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFirstOrderId() <= 0 {
		err := ViewOrdersRequestV1ValidationError{
			field:  "FirstOrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := ViewOrdersRequestV1ValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ViewOrdersRequestV1MultiError(errors)
	}

	return nil
}

// ViewOrdersRequestV1MultiError is an error wrapping multiple validation
// errors returned by ViewOrdersRequestV1.ValidateAll() if the designated
// constraints aren't met.
type ViewOrdersRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewOrdersRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewOrdersRequestV1MultiError) AllErrors() []error { return m }

// ViewOrdersRequestV1ValidationError is the validation error returned by
// ViewOrdersRequestV1.Validate if the designated constraints aren't met.
type ViewOrdersRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewOrdersRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewOrdersRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewOrdersRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewOrdersRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewOrdersRequestV1ValidationError) ErrorName() string {
	return "ViewOrdersRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ViewOrdersRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewOrdersRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewOrdersRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewOrdersRequestV1ValidationError{}

// Validate checks the field values on ViewOrdersResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewOrdersResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewOrdersResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewOrdersResponseV1MultiError, or nil if none found.
func (m *ViewOrdersResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewOrdersResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewOrdersResponseV1ValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewOrdersResponseV1ValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewOrdersResponseV1ValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewOrdersResponseV1MultiError(errors)
	}

	return nil
}

// ViewOrdersResponseV1MultiError is an error wrapping multiple validation
// errors returned by ViewOrdersResponseV1.ValidateAll() if the designated
// constraints aren't met.
type ViewOrdersResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewOrdersResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewOrdersResponseV1MultiError) AllErrors() []error { return m }

// ViewOrdersResponseV1ValidationError is the validation error returned by
// ViewOrdersResponseV1.Validate if the designated constraints aren't met.
type ViewOrdersResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewOrdersResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewOrdersResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewOrdersResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewOrdersResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewOrdersResponseV1ValidationError) ErrorName() string {
	return "ViewOrdersResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ViewOrdersResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewOrdersResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewOrdersResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewOrdersResponseV1ValidationError{}
