// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: manager-service/v1/manager-service.proto

package manager_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageType

	// no validation rules for Cost

	// no validation rules for Weight

	// no validation rules for UseTape

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on OrderView with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderView with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderViewMultiError, or nil
// if none found.
func (m *OrderView) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderViewValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderViewValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderViewValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return OrderViewMultiError(errors)
	}

	return nil
}

// OrderViewMultiError is an error wrapping multiple validation errors returned
// by OrderView.ValidateAll() if the designated constraints aren't met.
type OrderViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderViewMultiError) AllErrors() []error { return m }

// OrderViewValidationError is the validation error returned by
// OrderView.Validate if the designated constraints aren't met.
type OrderViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderViewValidationError) ErrorName() string { return "OrderViewValidationError" }

// Error satisfies the builtin error interface
func (e OrderViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderViewValidationError{}

// Validate checks the field values on AddOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrderRequestMultiError, or nil if none found.
func (m *AddOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := AddOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrderRequestValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrderRequestValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddOrderRequestMultiError(errors)
	}

	return nil
}

// AddOrderRequestMultiError is an error wrapping multiple validation errors
// returned by AddOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrderRequestMultiError) AllErrors() []error { return m }

// AddOrderRequestValidationError is the validation error returned by
// AddOrderRequest.Validate if the designated constraints aren't met.
type AddOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrderRequestValidationError) ErrorName() string { return "AddOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrderRequestValidationError{}

// Validate checks the field values on RefundRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RefundRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefundRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RefundRequestMultiError, or
// nil if none found.
func (m *RefundRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefundRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := RefundRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() <= 0 {
		err := RefundRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RefundRequestMultiError(errors)
	}

	return nil
}

// RefundRequestMultiError is an error wrapping multiple validation errors
// returned by RefundRequest.ValidateAll() if the designated constraints
// aren't met.
type RefundRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefundRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefundRequestMultiError) AllErrors() []error { return m }

// RefundRequestValidationError is the validation error returned by
// RefundRequest.Validate if the designated constraints aren't met.
type RefundRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefundRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefundRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefundRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefundRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefundRequestValidationError) ErrorName() string { return "RefundRequestValidationError" }

// Error satisfies the builtin error interface
func (e RefundRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefundRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefundRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefundRequestValidationError{}

// Validate checks the field values on GiveOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GiveOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrdersRequestMultiError, or nil if none found.
func (m *GiveOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GiveOrdersRequestMultiError(errors)
	}

	return nil
}

// GiveOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by GiveOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type GiveOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrdersRequestMultiError) AllErrors() []error { return m }

// GiveOrdersRequestValidationError is the validation error returned by
// GiveOrdersRequest.Validate if the designated constraints aren't met.
type GiveOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrdersRequestValidationError) ErrorName() string {
	return "GiveOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrdersRequestValidationError{}

// Validate checks the field values on ReturnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnRequestMultiError, or
// nil if none found.
func (m *ReturnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := ReturnRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnRequestMultiError(errors)
	}

	return nil
}

// ReturnRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnRequestMultiError) AllErrors() []error { return m }

// ReturnRequestValidationError is the validation error returned by
// ReturnRequest.Validate if the designated constraints aren't met.
type ReturnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnRequestValidationError) ErrorName() string { return "ReturnRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReturnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnRequestValidationError{}

// Validate checks the field values on ViewRefundsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewRefundsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewRefundsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewRefundsRequestMultiError, or nil if none found.
func (m *ViewRefundsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewRefundsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageId() <= 0 {
		err := ViewRefundsRequestValidationError{
			field:  "PageId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrdersPerPage() <= 0 {
		err := ViewRefundsRequestValidationError{
			field:  "OrdersPerPage",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ViewRefundsRequestMultiError(errors)
	}

	return nil
}

// ViewRefundsRequestMultiError is an error wrapping multiple validation errors
// returned by ViewRefundsRequest.ValidateAll() if the designated constraints
// aren't met.
type ViewRefundsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewRefundsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewRefundsRequestMultiError) AllErrors() []error { return m }

// ViewRefundsRequestValidationError is the validation error returned by
// ViewRefundsRequest.Validate if the designated constraints aren't met.
type ViewRefundsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewRefundsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewRefundsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewRefundsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewRefundsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewRefundsRequestValidationError) ErrorName() string {
	return "ViewRefundsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ViewRefundsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewRefundsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewRefundsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewRefundsRequestValidationError{}

// Validate checks the field values on ViewRefundsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewRefundsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewRefundsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewRefundsResponseMultiError, or nil if none found.
func (m *ViewRefundsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewRefundsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewRefundsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewRefundsResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewRefundsResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewRefundsResponseMultiError(errors)
	}

	return nil
}

// ViewRefundsResponseMultiError is an error wrapping multiple validation
// errors returned by ViewRefundsResponse.ValidateAll() if the designated
// constraints aren't met.
type ViewRefundsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewRefundsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewRefundsResponseMultiError) AllErrors() []error { return m }

// ViewRefundsResponseValidationError is the validation error returned by
// ViewRefundsResponse.Validate if the designated constraints aren't met.
type ViewRefundsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewRefundsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewRefundsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewRefundsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewRefundsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewRefundsResponseValidationError) ErrorName() string {
	return "ViewRefundsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ViewRefundsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewRefundsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewRefundsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewRefundsResponseValidationError{}

// Validate checks the field values on ViewOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ViewOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewOrdersRequestMultiError, or nil if none found.
func (m *ViewOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ViewOrdersRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFirstOrderId() <= 0 {
		err := ViewOrdersRequestValidationError{
			field:  "FirstOrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := ViewOrdersRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ViewOrdersRequestMultiError(errors)
	}

	return nil
}

// ViewOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ViewOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ViewOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewOrdersRequestMultiError) AllErrors() []error { return m }

// ViewOrdersRequestValidationError is the validation error returned by
// ViewOrdersRequest.Validate if the designated constraints aren't met.
type ViewOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewOrdersRequestValidationError) ErrorName() string {
	return "ViewOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ViewOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewOrdersRequestValidationError{}

// Validate checks the field values on ViewOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewOrdersResponseMultiError, or nil if none found.
func (m *ViewOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewOrdersResponseMultiError(errors)
	}

	return nil
}

// ViewOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ViewOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ViewOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewOrdersResponseMultiError) AllErrors() []error { return m }

// ViewOrdersResponseValidationError is the validation error returned by
// ViewOrdersResponse.Validate if the designated constraints aren't met.
type ViewOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewOrdersResponseValidationError) ErrorName() string {
	return "ViewOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ViewOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewOrdersResponseValidationError{}
