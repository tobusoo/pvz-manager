// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i gitlab.ozon.dev/chppppr/homework/internal/clients.KafkaProducer -o producer_mock.go -n KafkaProducerMock -p mock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gitlab.ozon.dev/chppppr/homework/internal/domain"
)

// KafkaProducerMock implements mm_clients.KafkaProducer
type KafkaProducerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSend          func(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error) (err error)
	funcSendOrigin    string
	inspectFuncSend   func(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error)
	afterSendCounter  uint64
	beforeSendCounter uint64
	SendMock          mKafkaProducerMockSend
}

// NewKafkaProducerMock returns a mock for mm_clients.KafkaProducer
func NewKafkaProducerMock(t minimock.Tester) *KafkaProducerMock {
	m := &KafkaProducerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SendMock = mKafkaProducerMockSend{mock: m}
	m.SendMock.callArgs = []*KafkaProducerMockSendParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mKafkaProducerMockSend struct {
	optional           bool
	mock               *KafkaProducerMock
	defaultExpectation *KafkaProducerMockSendExpectation
	expectations       []*KafkaProducerMockSendExpectation

	callArgs []*KafkaProducerMockSendParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// KafkaProducerMockSendExpectation specifies expectation struct of the KafkaProducer.Send
type KafkaProducerMockSendExpectation struct {
	mock               *KafkaProducerMock
	params             *KafkaProducerMockSendParams
	paramPtrs          *KafkaProducerMockSendParamPtrs
	expectationOrigins KafkaProducerMockSendExpectationOrigins
	results            *KafkaProducerMockSendResults
	returnOrigin       string
	Counter            uint64
}

// KafkaProducerMockSendParams contains parameters of the KafkaProducer.Send
type KafkaProducerMockSendParams struct {
	orderIDs  []uint64
	eventType domain.EventType
	err_usr   error
	err_ser   error
}

// KafkaProducerMockSendParamPtrs contains pointers to parameters of the KafkaProducer.Send
type KafkaProducerMockSendParamPtrs struct {
	orderIDs  *[]uint64
	eventType *domain.EventType
	err_usr   *error
	err_ser   *error
}

// KafkaProducerMockSendResults contains results of the KafkaProducer.Send
type KafkaProducerMockSendResults struct {
	err error
}

// KafkaProducerMockSendOrigins contains origins of expectations of the KafkaProducer.Send
type KafkaProducerMockSendExpectationOrigins struct {
	origin          string
	originOrderIDs  string
	originEventType string
	originErr_usr   string
	originErr_ser   string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSend *mKafkaProducerMockSend) Optional() *mKafkaProducerMockSend {
	mmSend.optional = true
	return mmSend
}

// Expect sets up expected params for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) Expect(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.paramPtrs != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by ExpectParams functions")
	}

	mmSend.defaultExpectation.params = &KafkaProducerMockSendParams{orderIDs, eventType, err_usr, err_ser}
	mmSend.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSend.expectations {
		if minimock.Equal(e.params, mmSend.defaultExpectation.params) {
			mmSend.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSend.defaultExpectation.params)
		}
	}

	return mmSend
}

// ExpectOrderIDsParam1 sets up expected param orderIDs for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectOrderIDsParam1(orderIDs []uint64) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.orderIDs = &orderIDs
	mmSend.defaultExpectation.expectationOrigins.originOrderIDs = minimock.CallerInfo(1)

	return mmSend
}

// ExpectEventTypeParam2 sets up expected param eventType for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectEventTypeParam2(eventType domain.EventType) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.eventType = &eventType
	mmSend.defaultExpectation.expectationOrigins.originEventType = minimock.CallerInfo(1)

	return mmSend
}

// ExpectErr_usrParam3 sets up expected param err_usr for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectErr_usrParam3(err_usr error) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.err_usr = &err_usr
	mmSend.defaultExpectation.expectationOrigins.originErr_usr = minimock.CallerInfo(1)

	return mmSend
}

// ExpectErr_serParam4 sets up expected param err_ser for KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) ExpectErr_serParam4(err_ser error) *mKafkaProducerMockSend {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{}
	}

	if mmSend.defaultExpectation.params != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Expect")
	}

	if mmSend.defaultExpectation.paramPtrs == nil {
		mmSend.defaultExpectation.paramPtrs = &KafkaProducerMockSendParamPtrs{}
	}
	mmSend.defaultExpectation.paramPtrs.err_ser = &err_ser
	mmSend.defaultExpectation.expectationOrigins.originErr_ser = minimock.CallerInfo(1)

	return mmSend
}

// Inspect accepts an inspector function that has same arguments as the KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) Inspect(f func(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error)) *mKafkaProducerMockSend {
	if mmSend.mock.inspectFuncSend != nil {
		mmSend.mock.t.Fatalf("Inspect function is already set for KafkaProducerMock.Send")
	}

	mmSend.mock.inspectFuncSend = f

	return mmSend
}

// Return sets up results that will be returned by KafkaProducer.Send
func (mmSend *mKafkaProducerMockSend) Return(err error) *KafkaProducerMock {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	if mmSend.defaultExpectation == nil {
		mmSend.defaultExpectation = &KafkaProducerMockSendExpectation{mock: mmSend.mock}
	}
	mmSend.defaultExpectation.results = &KafkaProducerMockSendResults{err}
	mmSend.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// Set uses given function f to mock the KafkaProducer.Send method
func (mmSend *mKafkaProducerMockSend) Set(f func(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error) (err error)) *KafkaProducerMock {
	if mmSend.defaultExpectation != nil {
		mmSend.mock.t.Fatalf("Default expectation is already set for the KafkaProducer.Send method")
	}

	if len(mmSend.expectations) > 0 {
		mmSend.mock.t.Fatalf("Some expectations are already set for the KafkaProducer.Send method")
	}

	mmSend.mock.funcSend = f
	mmSend.mock.funcSendOrigin = minimock.CallerInfo(1)
	return mmSend.mock
}

// When sets expectation for the KafkaProducer.Send which will trigger the result defined by the following
// Then helper
func (mmSend *mKafkaProducerMockSend) When(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error) *KafkaProducerMockSendExpectation {
	if mmSend.mock.funcSend != nil {
		mmSend.mock.t.Fatalf("KafkaProducerMock.Send mock is already set by Set")
	}

	expectation := &KafkaProducerMockSendExpectation{
		mock:               mmSend.mock,
		params:             &KafkaProducerMockSendParams{orderIDs, eventType, err_usr, err_ser},
		expectationOrigins: KafkaProducerMockSendExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSend.expectations = append(mmSend.expectations, expectation)
	return expectation
}

// Then sets up KafkaProducer.Send return parameters for the expectation previously defined by the When method
func (e *KafkaProducerMockSendExpectation) Then(err error) *KafkaProducerMock {
	e.results = &KafkaProducerMockSendResults{err}
	return e.mock
}

// Times sets number of times KafkaProducer.Send should be invoked
func (mmSend *mKafkaProducerMockSend) Times(n uint64) *mKafkaProducerMockSend {
	if n == 0 {
		mmSend.mock.t.Fatalf("Times of KafkaProducerMock.Send mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSend.expectedInvocations, n)
	mmSend.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSend
}

func (mmSend *mKafkaProducerMockSend) invocationsDone() bool {
	if len(mmSend.expectations) == 0 && mmSend.defaultExpectation == nil && mmSend.mock.funcSend == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSend.mock.afterSendCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSend.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Send implements mm_clients.KafkaProducer
func (mmSend *KafkaProducerMock) Send(orderIDs []uint64, eventType domain.EventType, err_usr error, err_ser error) (err error) {
	mm_atomic.AddUint64(&mmSend.beforeSendCounter, 1)
	defer mm_atomic.AddUint64(&mmSend.afterSendCounter, 1)

	mmSend.t.Helper()

	if mmSend.inspectFuncSend != nil {
		mmSend.inspectFuncSend(orderIDs, eventType, err_usr, err_ser)
	}

	mm_params := KafkaProducerMockSendParams{orderIDs, eventType, err_usr, err_ser}

	// Record call args
	mmSend.SendMock.mutex.Lock()
	mmSend.SendMock.callArgs = append(mmSend.SendMock.callArgs, &mm_params)
	mmSend.SendMock.mutex.Unlock()

	for _, e := range mmSend.SendMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSend.SendMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSend.SendMock.defaultExpectation.Counter, 1)
		mm_want := mmSend.SendMock.defaultExpectation.params
		mm_want_ptrs := mmSend.SendMock.defaultExpectation.paramPtrs

		mm_got := KafkaProducerMockSendParams{orderIDs, eventType, err_usr, err_ser}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.orderIDs != nil && !minimock.Equal(*mm_want_ptrs.orderIDs, mm_got.orderIDs) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter orderIDs, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originOrderIDs, *mm_want_ptrs.orderIDs, mm_got.orderIDs, minimock.Diff(*mm_want_ptrs.orderIDs, mm_got.orderIDs))
			}

			if mm_want_ptrs.eventType != nil && !minimock.Equal(*mm_want_ptrs.eventType, mm_got.eventType) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter eventType, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originEventType, *mm_want_ptrs.eventType, mm_got.eventType, minimock.Diff(*mm_want_ptrs.eventType, mm_got.eventType))
			}

			if mm_want_ptrs.err_usr != nil && !minimock.Equal(*mm_want_ptrs.err_usr, mm_got.err_usr) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter err_usr, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originErr_usr, *mm_want_ptrs.err_usr, mm_got.err_usr, minimock.Diff(*mm_want_ptrs.err_usr, mm_got.err_usr))
			}

			if mm_want_ptrs.err_ser != nil && !minimock.Equal(*mm_want_ptrs.err_ser, mm_got.err_ser) {
				mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameter err_ser, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSend.SendMock.defaultExpectation.expectationOrigins.originErr_ser, *mm_want_ptrs.err_ser, mm_got.err_ser, minimock.Diff(*mm_want_ptrs.err_ser, mm_got.err_ser))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSend.t.Errorf("KafkaProducerMock.Send got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSend.SendMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSend.SendMock.defaultExpectation.results
		if mm_results == nil {
			mmSend.t.Fatal("No results are set for the KafkaProducerMock.Send")
		}
		return (*mm_results).err
	}
	if mmSend.funcSend != nil {
		return mmSend.funcSend(orderIDs, eventType, err_usr, err_ser)
	}
	mmSend.t.Fatalf("Unexpected call to KafkaProducerMock.Send. %v %v %v %v", orderIDs, eventType, err_usr, err_ser)
	return
}

// SendAfterCounter returns a count of finished KafkaProducerMock.Send invocations
func (mmSend *KafkaProducerMock) SendAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.afterSendCounter)
}

// SendBeforeCounter returns a count of KafkaProducerMock.Send invocations
func (mmSend *KafkaProducerMock) SendBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSend.beforeSendCounter)
}

// Calls returns a list of arguments used in each call to KafkaProducerMock.Send.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSend *mKafkaProducerMockSend) Calls() []*KafkaProducerMockSendParams {
	mmSend.mutex.RLock()

	argCopy := make([]*KafkaProducerMockSendParams, len(mmSend.callArgs))
	copy(argCopy, mmSend.callArgs)

	mmSend.mutex.RUnlock()

	return argCopy
}

// MinimockSendDone returns true if the count of the Send invocations corresponds
// the number of defined expectations
func (m *KafkaProducerMock) MinimockSendDone() bool {
	if m.SendMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMock.invocationsDone()
}

// MinimockSendInspect logs each unmet expectation
func (m *KafkaProducerMock) MinimockSendInspect() {
	for _, e := range m.SendMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendCounter := mm_atomic.LoadUint64(&m.afterSendCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMock.defaultExpectation != nil && afterSendCounter < 1 {
		if m.SendMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s", m.SendMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s with params: %#v", m.SendMock.defaultExpectation.expectationOrigins.origin, *m.SendMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSend != nil && afterSendCounter < 1 {
		m.t.Errorf("Expected call to KafkaProducerMock.Send at\n%s", m.funcSendOrigin)
	}

	if !m.SendMock.invocationsDone() && afterSendCounter > 0 {
		m.t.Errorf("Expected %d calls to KafkaProducerMock.Send at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMock.expectedInvocations), m.SendMock.expectedInvocationsOrigin, afterSendCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *KafkaProducerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSendInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *KafkaProducerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *KafkaProducerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSendDone()
}
