services:
  manager-service:
    container_name: manager-service
    image: manager-service-image:1.0.0
    build:
      context: ./../../
      dockerfile: ${PWD}/build/dev/manager_service/Dockerfile
    volumes:
      - ./../../configs/manager_service.yaml:/configs/manager_service.yaml
      - ./../../pkg/manager-service/v1/manager-service.swagger.json:/pkg/manager-service/v1/manager-service.swagger.json
      - ./../wait-for-kafka.sh:/wait-for-kafka.sh
    env_file:
      - ./../../.env
    ports:
      - 8080:8080
      - 8081:8081
    depends_on:
      - postgres
      - kafka-init-topics
    entrypoint: [ "/wait-for-kafka.sh" ]
    command: [ "/bin/manager_service" ]
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./../../configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./../../configs/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - manager-service
      - prometheus
      - grafana
      - kafka-ui

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    hostname: alertmanager
    restart: always
    ports:
      - 9093:9093
    volumes:
      - ./../../configs/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'

  notifier:
    container_name: notifier
    image: notifier-image:1.0.0
    build:
      context: ./../../
      dockerfile: ${PWD}/build/dev/notifier/Dockerfile
    volumes:
      - ./../../configs/notifier.yaml:/configs/notifier.yaml
      - ./../wait-for-kafka.sh:/wait-for-kafka.sh
    depends_on:
      - kafka-init-topics
    entrypoint: [ "/wait-for-kafka.sh" ]
    command: [ "/bin/notifier" ]
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./../../configs/alert.rules:/etc/prometheus/alert.rules
      - ./../../configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    ports:
      - 9090:9090
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./../../configs/grafana/dashboards:/var/lib/grafana/dashboards
      - ./../../configs/grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/all.yml
      - ./../../configs/grafana/provisioning/datasources.yml:/etc/grafana/provisioning/datasources/all.yml
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    restart: always

  postgres:
    container_name: postgres_db
    image: postgres:15-alpine
    volumes:
      - ./../../pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    restart: always

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_NAME: pvz
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"
    ports:
      - 8082:8080
    restart: always

  kafka0:
    container_name: kafka
    image: confluentinc/cp-kafka:7.7.1
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'OWQ2MWJjYzQ4YmJjMTFlZm'
    ports:
      - 9092:9092
    restart: always

  kafka-init-topics:
    container_name: kafka-init-topics
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - kafka0
    command: "bash -c 'echo Waiting for Kafka to be ready... && cub kafka-ready -b kafka0:29092 1 30 && kafka-topics --create --topic pvz.events-log --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"

volumes:
  grafana-storage: {}
  prometheus-storage: {}
